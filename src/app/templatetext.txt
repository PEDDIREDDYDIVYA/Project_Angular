import { Component} from '@angular/core';
import {SkillService} from "./skill.service";

@Component({
  selector: 'app-template',
  template: `
  <nav >
  <a  href="#" (click)="callData()">ShowAllTemplates</a>&nbsp;
  <a  href="">CreateTemplate</a>
  </nav>
    <table class="table table-bordered" >
    <tbody>
      <tr>
        <td scope="col">Technology area</td>
        <td scope="col">{{Technology}}</td>
      </tr>
      <tr>
        <td scope="col">Skill</td>
        <td>

        <!-----ADD SKILL---->

        <button (click)="addskil=true;editskil=false"> ADDSKILL</button>

        <ng-template [ngIf]="addskil">
        
          <label for="skill" class="form-label"></label>
          <input #ti type="text" [(ngModel)]="userobj.skill" class="form-control" id="skill" placeholder="Enter Skill">
        
        
        <button (click)="addskill(ti.value)">Submit</button>
        
        </ng-template>
        </td>

        <!-----    EDIT SKILL---->

      </tr>
      <tr *ngFor="let skill of skillslist.EVALUATION_TEMP; index as idx ">
        <td>Skill:</td>
        <td>{{skill.TEMPSKILL}}
        <br><br>
        <button (click)="edit(skill.TEMPID,skill.TEMPSKILL)">EDITSKILL</button>&nbsp;

        <ng-template [ngIf]="editskil" >
       <div class="mb-3">
            <label for="skill" class="form-label"></label>
            <input #ti type="text"  [(ngModel)]="userobj.skill" class="form-control" id="skill" placeholder="Edit Skill">
       </div>
       <div>
            <button (click)="editskill(ti.value)">Submit</button>
       </div>
       <br>
        </ng-template>

      <!-----REMOVE SKILL---->

        <button (click)="removeskill(skill.ind)"> REMOVE</button>
        </td>
      </tr>
    </tbody>
  </table>
   <button class="btn" (click)="submithandler()">Submit</button>

  `,
  styles: [`
  table{
    border:1px solid gray;
    width:30%;
    margin:100px;
    padding:20px;
    table:layout:fixed;
    text-align:center;
  }
  input{
    width:100px;
    margin:10px;
  }
 .btn{
   margin:0px 150px;
 } 
  
  `
  ]
})
export class TemplateComponent {
  Technology="Front End";
  static p:number=0;
  skillslist;
  editind;
  addskil=false;
  editskil = false;
  userobj={skill:""};
  finallist;
  new=[];
  update=[];
  delete=[];
  i;
  constructor(private ds:SkillService){
    this.callDataServer();
  }
  callDataServer(){
    this.ds.getUsers().subscribe( (res)=>{
      //console.log("entered skilllist")
      //console.log(res);
      this.skillslist = res;
     // console.log(this.skillslist);
    })
  }
  callData(){
    this.ds.getUsers().subscribe(res=>
    this.skillslist=res)
  }
  editskill(fd){
    for(let i=0;i<this.skillslist.EVALUATION_TEMP.length;i++){
       if(this.skillslist.EVALUATION_TEMP[i].TEMPID===this.editind){
         this.skillslist.EVALUATION_TEMP[i].TEMPSKILL=fd;
       }
    }
    console.log("id is"+this.editind,"skill is:"+fd)
    this.update.push({"TEMPID":this.editind,"TEMPSKILL":fd});
    console.log(this.update);
    this.editskil=false;
}
 edit(val,v){
   this.addskil=false;
   this.editskil=true;
   this.userobj.skill=v;
   this.editind=val;
 }
  addskill(val){
    this.addskil=false;
    this.skillslist.EVALUATION_TEMP.unshift({"TEMPSKILL":val,"TEMPTECHNAME":"FRONT-END-EXPERIENCE"});
    this.new.push({"TEMPSKILL":val,"TEMPTECHNAME":"FRONT-END-EXPERIENCE"});
    this.userobj.skill="";
    this.addskil=false;
  }/*
   removeskill(inde){
     this.addskil=false;
     let resobj={
       idd:inde
     }
    //console.log("Index is:",inde);
    this.ds.deleteUser(resobj).subscribe((res) => {
    //console.log("res:",res);
      this.skillslist=res;
    })
  }
  */
 submithandler(){
   let finaldata={
     EVALUATION_TEMP:{
       "NEW":this.new,
       "UPDATE":this.update,
       "DELETE":this.delete
     }
   }
    this.ds.postsubmit(finaldata).subscribe((res)=>{
    console.log("resobj:",res);
    this.finallist = res;
    console.log(this.finallist);
  })
 }

 









 import { Component} from '@angular/core';
import {SkillService} from './skill.service'
@Component({
  selector: 'app-alleval',
  template: `
    <h1>Evaluation</h1>
    <form>
    <table class="table table-bordered">
    <tr>
       <td>
        <label for="idd">Applicant's name:</label>&nbsp;
        <input type="text"  #t class="form-control" id="idd" placeholder="Enter Applicant Name" required>
      </td>
    </tr>
    <tr>
       <td>
        <label for="id1">EVALNAME</label>
        <input type="text"  #ti class="form-control" id="id1" placeholder="Enter evaluator name" required>
      </td>
    </tr>
    <tr>
        <td scope="col">
        <label for="id2">TechnologyArea</label>
        <select #s name="technologyArea" id="id2" (change)="select($event.target.value)">
        <option *ngFor="let skill of evallist.EVALUATION_TEMP">{{skill.TEMPTECHNAME}}
        </option>
        </select>
        </td>
        <td scope="col">Date:<input type="date"></td>
    </tr>
    <tr>
    <td>Skill</td>
    <td>Score</td>
    </tr>           
    <tr  *ngFor="let skill of skillslist.body">
    <td>{{skill.TEMPSKILL}}</td>
    <td>
      <input #sc type="range" min="0" max="10" (change)="scorehandler(sc.value,skill.TEMPSKILL)">{{sc.value}}
    </td>
    </tr>
    <br>
    <tr>
    <td></td>
    <td>
    <button type="submit" (click)="finalhandler(t.value,ti.value,s.value)">submit</button>
    </td>
    </tr>
    </table>
    </form>
  `,
  styles: [`
   input{
     width:200%
   }
   select{
     width:200px
   }
  `
  ]
})
export class TemplateComponent {
 arr=['HTML','JavaScript'];
 Technology="Front End";
 static p:number=0;
 evallist;
 editind;
 addskil=false;
 editskil = false;
 userobj={skill:""};
 flist;
 finallist;
 skil;
 skillslist;
 new=[];
 update=[];
 ob;
 delete=[];
 oparr=[];
 score;
 sc=[];
 i;
 lis=[];
 techobj=true;
 techname;
 constructor(private ds:SkillService){
   this.callDataServer();
 }
 callDataServer(){
   this.ds.getUsers().subscribe( (res)=>{
     this.evallist=res;
     for(let i=0;i<this.evallist.EVALUATION_TEMP.length;i++){
      this.oparr.push(this.evallist.EVALUATION_TEMP[i].TEMPTECHNAME);
     }
     this.oparr=Array.from(new Set(this.oparr));
     console.log(this.oparr);
     })
   }
   scorehandler(va,sk){
     this.score=va;
     this.ob={"score":this.score,"skill":sk};
     this.sc.push(this.ob);
     console.log("score array",this.sc);
     this.skil=sk;
     console.log("score is",this.score,this.skil);
   }
   finalhandler(name,evalname,tecname){
     console.log("values are:",name,evalname,tecname);
     for(let i=0;i<this.sc.length;i++){
      
      this.flist={"EVALUATION":[{
        "EVALNAME":tecname,
        "APPLICANTNAME":name,
        "EVALUATORNAME":evalname,
        "EVALSKILL":this.sc[i].skill,
        "EVALSCORE":this.sc[i].score}]
    }
    console.log("final list is",this.flist);
    this.ds.postevalskills(this.flist).subscribe((res)=>{
      console.log("response",res);
    })
     }
  }
   handler(val)
   {
       this.techname=val;
       console.log("entered handler");
       this.techobj=false;
       this.editskil=true;
       this.lis=[];
     for(let j=0;j<this.evallist.EVALUATION_TEMP.length;j++){
       if(this.evallist.EVALUATION_TEMP[j].TEMPTECHNAME===val)
       {
           console.log(this.evallist.EVALUATION_TEMP[j]);
          this.lis.push(this.evallist.EVALUATION_TEMP[j]);
       }
     }
     console.log("list is:",this.lis);
   }
   select(val)
   {
     console.log("entered select",val);
     this.ds.getskills(val).subscribe( (res)=>{
       this.skillslist=res;
       console.log("skillslist is",this.skillslist);
     })
   }
 

 addskill(val){
     let max=-1;
     this.addskil=false;
    console.log( this.techname);
   this.evallist.EVALUATION_TEMP.unshift({"TEMPSKILL":val,"TEMPTECHNAME":this.techname});
   console.log(this.evallist);
   this.new.push({"TEMPSKILL":val,"TEMPTECHNAME":this.techname});
   this.lis.unshift({"TEMPSKILL":val,"TEMPTECHNAME":this.techname});
   this.addskil=true;
     }
submithandler(){
  let finaldata={
    EVALUATION:{
      "NEW":this.new,
      "UPDATE":this.update,
      "DELETE":this.delete
    }
  }
   this.ds.postsubmit(finaldata).subscribe((res)=>{
   console.log("resobj:",res);
   this.finallist = res;
   console.log(this.finallist);
 })
}
 
}




all ShowAllTemplates

import { Component} from '@angular/core';
import {SkillService} from "./skill.service";

@Component({
  selector: 'app-tech',
  template: `
  <div *ngIf="techobj">
  <h2>Technologies:</h2>
  <div >
  <table class="table table-striped">
  <tr><td>Technologies:</td></tr>
  <tr *ngFor="let skill of oparr">
  <td>
  <a [routerLink]='' (click)="handler(skill)">{{skill}}</a>
  </td></tr></table>  </div>
  </div>

  <div *ngIf="editskil" >
  <h2>Skills:</h2>
  <table class="table table-bordered">
  <tbody>
  <tr>
  <td>Skill</td>
  <td>
  <button (click)="addskil=true;editskil=true;"> ADDSKILL</button>&nbsp;
  <ng-template [ngIf]="addskil">
        <label for="skill" class="form-label"></label>
        <input #ti type="text" [(ngModel)]="userobj.skill" class="form-control" id="skill" placeholder="Enter Skill">
        <button (click)="addskill(ti.value)">Submit</button>
  </ng-template>
  </td>
  </tr>
  <tr *ngFor="let skill of skillslist.body; index as idx ">
    <td>{{skill.TEMPSKILL}}</td>
    <td>
    
    <button (click)="edit(skill.TEMPID)">EDITSKILL</button>&nbsp;
     <ng-template [ngIf]="eskil" >
       <div class="mb-3">
            <label for="skil" class="form-label"></label>
            <input #t type="text"   class="form-control" id="skil" placeholder="Edit Skill">
       </div>
       <div>
            <button (click)="editskill(t.value)">Submit</button>
       </div>
       <br>
        </ng-template>

        <button (click)="removeskill(skill.ind)"> REMOVE</button>
    
    
    </td>
  </tr>
  </tbody>
  </table>
  </div>
  <button (click)="submithandler()">POST</button>
  `,
  styles: [`
  h2{
    margin:30px;
  }
  table{
    border:1px solid gray;
    width:50%;
    margin:100px;
    table:layout:fixed;
    text-align:center;
  }
  input{
    width:120px;
    margin:10px;
  }
  button{
      margin:5px;
  }
  div{
      color:blue;
      margin:20px;
  }

  `
  ]
})
export class TechComponent {
 Technology="Front End";
 static p:number=0;
 evallist;
 editind;
 addskil=false;
 editskil = false;
 userobj={skill:""};
 useobj={skil:""};
 finallist;
 sname;
 new=[];
 update=[];
 eskil=false;
 delete=[];
 oparr=[];
 skillslist;
 i;
 lis=[];
 techobj=true;
 techname;
 constructor(private ds:SkillService){
   this.callDataServer();
 }
 callDataServer(){
   this.ds.getUsers().subscribe( (res)=>{
     this.evallist=res;
     for(let i=0;i<this.evallist.EVALUATION_TEMP.length;i++){
         if(this.evallist.EVALUATION_TEMP[i].TEMPTECHNAME){
      this.oparr.push(this.evallist.EVALUATION_TEMP[i].TEMPTECHNAME);}
     }
     this.oparr=Array.from(new Set(this.oparr));
     console.log(this.oparr);
     })
   }
   edit(v){
    this.eskil=true;
    this.editind=v;
   }
   handler(val)
   {
     this.ds.getskills(val).subscribe((res)=>{
      this.skillslist=res;
      this.sname=val;
      console.log("response is:",res);
      console.log("skillslist:",this.skillslist);
      this.techname=val;
      console.log("entered handler");
      this.techobj=false;
      this.editskil=true;
      this.lis=[];
    for(let j=0;j<this.evallist.EVALUATION_TEMP.length;j++){
      if(this.evallist.EVALUATION_TEMP[j].TEMPTECHNAME===val)
      {
          console.log(this.evallist.EVALUATION_TEMP[j]);
         this.lis.push(this.evallist.EVALUATION_TEMP[j]);
      }
    }
    console.log("list is:",this.lis);


     })
   }
 callData(){
   this.ds.getUsers().subscribe(res=>
   this.evallist=res)
   }

 addskill(val){
    this.ds.getskills(this.sname).subscribe((res)=>{
    this.addskil=false;
    console.log( this.techname);
    this.skillslist.body.unshift({"TEMPSKILL":val,"TEMPTECHNAME":this.sname});
    console.log(this.evallist);
    this.new.push({"TEMPSKILL":val,"TEMPTECHNAME":this.sname});
    this.lis.unshift({"TEMPSKILL":val,"TEMPTECHNAME":this.sname});
    this.addskil=true;
  })
     }
  editskill(fd){
      for(let i=0;i<this.skillslist.body.length;i++){
         if(this.skillslist.body[i].TEMPID===this.editind){
           this.skillslist.body[i].TEMPSKILL=fd;
         }
      }
      console.log("id is"+this.editind,"skill is:"+fd)
      this.update.push({"TEMPID":this.editind,"TEMPSKILL":fd});
      console.log(this.update);
  }
submithandler(){
  let finaldata={
    EVALUATION_TEMP:{
      "NEW":this.new,
      "UPDATE":this.update,
      "DELETE":this.delete
    }
  }
   this.ds.postsubmitskills(finaldata).subscribe((res)=>{
   console.log("parameters",this.sname,this.finallist)
   console.log("resobj:",res);
   this.finallist = res;
   console.log("finallist",this.finallist);
 })
}
}





CreateTemplate




import { Component } from "@angular/core";
import { SkillService } from "./skill.service";

@Component({
    selector:'app-createtemp',
    template:`
    <div class="container">
              <form>
                  <h5 class="text-center">Create New Template</h5><br>
                          <div class="form-group container">
                           <label  for="exampleInputtext1">Technology:</label>&nbsp;
                           <input type="text"  #t class="form-control" id="exampleInputtext1" placeholder="Enter Technology" required>
                          </div>
                          <div class="form-group container">
                           <label  for="exampleInputtext">Skill:</label>&nbsp;
                           <input type="text"  #ti class="form-control" id="exampleInputtext" placeholder="Enter skill" required>
                          </div>
                        <div class="form-group container">
                          <button type="submit" class="btn btn-secondary" (click)="addSubmit(t.value,ti.value)">Submit</button>
                        </div>
              </form>
          </div>
       
    <!--button (click)="goBack()">Go Back</button-->
    `,
    styles:[`
   
    
      div{
          border:1px gray;
      }
    `]
})
export class CreateTemplateComp{
      title="temp comp";
    adduser;
    skillobj={skill:''};
    skilllist=[];
    edituser;
    slist;
    finaldata;
    editval;
    new=[];
    update=[];
    delete=[];
    editind=0;
    addindex=0;
    delindex=0;
    new1=[]
    fdata;
    constructor(private ds:SkillService){
      document.getElementById("eval").style.color="black";
      document.getElementById("temp").style.color="green";
      /*
        this.ds.getUsers().subscribe((res)=>{
            this.slist=res;

            console.log("requested data",typeof(this.slist.EVALUATION_TEMP));
            console.log(this.slist);
        })
      */  
    }


   /*  goBack(){
        this.router.navigate(['/template']);
    } */
   addSubmit(fd,ski){
     console.log("entered addsubmit")
    //this.slist.EVALUATION_TEMP.unshift({"TEMPTECHNAME":fd});
    this.new.push({"TEMPTECHNAME":fd,"TEMPSKILL":ski})
  //this.new.push({"TEMPTECHNAME":fd});    
    this.finaldata={
      "EVALUATION_TEMP":{
          "NEW":this.new,
          "UPDATE":this.update,
          "DELETE":this.delete,
      }
  }
            this.skilllist.push(fd);
            this.ds.postsubmit(this.finaldata).subscribe((res)=>{
            console.log("finaldata",this.finaldata);
            //console.log("resobj:",res);
            })
            
        this.skilllist.push(fd);
        this.skillobj.skill="";
        this.adduser=false;
      }
    
}





CreateTemplate




import { Component } from "@angular/core";
import { SkillService } from "./skill.service";

@Component({
    selector:'app-createtemp',
    template:`
    <div class="container  table-responsive">
             <form class="Absolute-Center is-Responsive">
                  <h5 class="text-center">Create New Template</h5><br>
                          <div class="form-group">
                           <label  for="Inputtext1">Technology</label>&nbsp;
                           <input type="text"  #t class="form-control" id="Inputtext1" placeholder="Enter Technology" required>
                          </div>
                        <div class="form-group">
                          <label for="Inputtext2">Skill</label>&nbsp;
                          <input type="text" #s class="form-control" id="Inputtext2" placeholder="Enter Skill" required >
                    </div>
                        <div class="form-group container text-center">
                          <button type="submit" class="btn-primary" data-toggle="modal" data-target="#myModal" (click)="addSubmit(t.value,s.value)">Add Technology</button>
                        </div>
              </form>
          </div>
          <div  class="modal fade" id="myModal" role="dialog" >
          <div class="modal-dialog">
          
            <!-- Modal content-->
            <div  class="modal-content">
              <div  class="modal-header">Success Card
                <button  type="button" class="close" data-dismiss="modal">&times;</button>
              </div>
              <div style="width:80%;margin:0px 40px;background-color:blue" class="modal-body">
              <h1 ><i class="bi bi-check-circle"></i></h1><h3 style="color:white">Data Saved Successfully</h3>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn-info" data-dismiss="modal">Close</button>
              </div>
            </div>
            
          </div>
      
        </div>
    <!--button (click)="goBack()">Go Back</button-->
    `,
    styles:[`
   
    
      .form-group{
        width:90%;
        margin-left: auto; 
        margin-right: auto;
    }
      div{
          border:5px lightgrey;
      }
      .card{
        margin:20px 50px;
      }
    `]
})
export class CreateTemplateComp{
      title="temp comp";
    adduser;
    skillobj={skill:''};
    skilllist=[];
    edituser;
    slist;
    finaldata;
    editval;
    new=[];
    update=[];
    delete=[];
    editind=0;
    addindex=0;
    delindex=0;
    sucess=false;
    
    constructor(private ds:SkillService){
      document.getElementById("eval").style.color="black";
      document.getElementById("temp").style.color="green";
        this.ds.getUsers().subscribe((res)=>{
            this.slist=res;
           // console.log("requested data",typeof(this.slist.EVALUATION_TEMP));
            //console.log(this.slist.EVALUATION_TEMP);
        })
        
    }
    submitdata(val,i){}

  ngOnInit(): void {
  }
   /*  goBack(){
        this.router.navigate(['/template']);
    } */
   addSubmit(fd,s){
    this.slist.EVALUATION_TEMP.unshift({"TEMPTECHNAME":fd,"TEMPSKILL":s});
    this.new.push({"TEMPTECHNAME":fd,"TEMPSKILL":s});    
    this.finaldata={
      "EVALUATION_TEMP":{
          "NEW":this.new,
          "UPDATE":this.update,
          "DELETE":this.delete,
      }
  }
         
          console.log(this.new);
          this.skilllist.push(fd);
          if(fd!=='' && s!=='')
            {
                 this.sucess=true;
              }
              this.sucess=true;
            
            this.ds.postsubmit(this.finaldata).subscribe((res)=>{
              if(fd!=='' && s!=='')
              {
                   this.sucess=true;
                }
            console.log("resobj:",res);
            })
        this.skilllist.push(fd);
        this.skillobj.skill="";
        this.adduser=false;
        
      }
    
}








latest

import { Component } from "@angular/core";
import { SkillService } from "./skill.service";

@Component({
    selector:'app-createtemp',
    template:`
    <div class="container  table-responsive">
             <form class="Absolute-Center is-Responsive">
                  <h5 class="text-center">Create New Template</h5><br>
                          <div class="form-group">
                           <label  for="Inputtext1">Technology</label>&nbsp;
                           <input type="text"  #t class="form-control" id="Inputtext1" placeholder="Enter Technology" required>
                          </div>
                        <div class="form-group">
                          <label for="Inputtext2">Skill</label>&nbsp;
                          <input type="text" #s class="form-control" id="Inputtext2" placeholder="Enter Skill" required >
                    </div>
                        <div class="form-group container text-center">
                          <button type="submit" class="btn-primary" data-toggle="modal" data-target="#myModal" (click)="addSubmit(t.value,s.value)">Add Technology</button>
                        </div>
              </form>
          </div>
          <div *ngIf="sucess">
          <div class="modal fade" id="myModal" role="dialog" >
          <div class="modal-dialog">
          
            <!-- Modal content-->
            <div  *ngIf="sucess"class="modal-content">
              <div  class="modal-header">Success Card
                <button  type="button" class="close" data-dismiss="modal">&times;</button>
              </div>
              <div style="width:80%;margin:0px 40px;background-color:#6495ED " class="modal-body">
              <h1 ><i class="bi bi-check-circle"></i></h1><h3 style="color:white">Data Saved Successfully</h3>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn-secondary" data-dismiss="modal">Close</button>
              </div>
            
          </div>
      
        </div>
        </div>
        </div>
    <!--button (click)="goBack()">Go Back</button-->
    `,
    styles:[`
   
    
      .form-group{
        width:90%;
        margin-left: auto; 
        margin-right: auto;
    }
      div{
          border:5px lightgrey;
      }
      .card{
        margin:20px 50px;
      }
    `]
})
export class CreateTemplateComp{
      title="temp comp";
    adduser;
    skillobj={skill:''};
    skilllist=[];
    edituser;
    slist;
    finaldata;
    editval;
    new=[];
    update=[];
    delete=[];
    editind=0;
    addindex=0;
    delindex=0;
    sucess=false;
    
    constructor(private ds:SkillService){
      document.getElementById("eval").style.color="black";
      document.getElementById("temp").style.color="green";
        this.ds.getUsers().subscribe((res)=>{
            this.slist=res;
           // console.log("requested data",typeof(this.slist.EVALUATION_TEMP));
            //console.log(this.slist.EVALUATION_TEMP);
        })
        
    }
    submitdata(val,i){}

  ngOnInit(): void {
  }
   /*  goBack(){
        this.router.navigate(['/template']);
    } */
   addSubmit(fd,s){
    this.slist.EVALUATION_TEMP.unshift({"TEMPTECHNAME":fd,"TEMPSKILL":s});
    this.new.push({"TEMPTECHNAME":fd,"TEMPSKILL":s});    
    this.finaldata={
      "EVALUATION_TEMP":{
          "NEW":this.new,
          "UPDATE":this.update,
          "DELETE":this.delete }}
  console.log(this.new);
  this.skilllist.push(fd);
  /*
  if(fd!=='' && s!=='')
    {this.sucess=true;}*/
     //this.sucess=true;
    this.ds.postsubmit(this.finaldata).subscribe((res)=>{
      /*
      if(fd!=='' && s!=='')
      {
           this.sucess=true;
        }*/
        this.sucess=true;
    })
this.skilllist.push(fd);
this.skillobj.skill="";
this.adduser=false;

}
         
         
    
}